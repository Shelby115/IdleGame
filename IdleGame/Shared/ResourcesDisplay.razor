@using IdleGame.Domain

<div class="resources">
    @foreach (var resource in Resources)
    {
        var production = GetProduction(resource.Name);
        var consumption = GetConsumption(resource.Name);
        var isPositiveProduction = production >= consumption;

        <div class="resource">
            <div class="resource-icon-container">
                <img src="images/@(resource.ImageName)" class="resource-icon" />
            </div>
            @(resource.Quantity.ToString("N0"))
            <span class="resource-production" style="color: @(isPositiveProduction ? "green" : "red");">@($"{(isPositiveProduction ? "+" : "-")}{(production - consumption):N0}")/s</span>
        </div>
    }
</div>

@code {
    [Parameter]
    public Resources Resources { get; set; }

    [Parameter]
    public Func<string, int> GetConsumption { get; set; }

    [Parameter]
    public Func<string, int> GetProduction { get; set; }    
    
    [Parameter]
    public TimeSpan? RefreshRate { get; set; }

    private Timer StateHasChangedTimer;
    protected override Task OnInitializedAsync()
    {
        StateHasChangedTimer = new Timer(StateHasChangedTimerCallback, null, TimeSpan.Zero, RefreshRate ?? TimeSpan.FromMilliseconds(100));
        return base.OnInitializedAsync();
    }
    private void StateHasChangedTimerCallback(object? state)
    {
        StateHasChanged();
    }

    private bool displayConsumption(string resourceName)
    {
        return GetConsumption(resourceName) != 0;
    }

    private bool displayProduction(string resourceName)
    {
        return GetProduction(resourceName) != 0;
    }
}